from __future__ import annotations

import dataclasses
import inspect
import typing as tp
from collections import defaultdict
from pathlib import Path
from types import ModuleType


def get_shared_types(modules: list[ModuleType]) -> dict[str, dict[str, set[tuple[str, str]]]]:
    """
    Scan modules to find shared types and their fields.

    Args:
        modules: list of imported modules to scan.

    Returns:
        A dictionary mapping class names to a dictionary containing:
            - `modules`: Set of module names where the class is defined.
            - `fields`: Dictionary mapping field names to the set of modules where the field is present.
    """
    type_data = {}

    for module in modules:

        hk_module_name = module.__name__.split(".")[-1]

        for name, obj in inspect.getmembers(module, inspect.isclass):

            if not dataclasses.is_dataclass(obj):
                continue

            if not obj.__module__.startswith("soulstruct_havok.types.hk") or obj.__module__.endswith(".hk"):
                continue

            if name not in type_data:
                type_data[name] = {"modules": set(), "parents": set(), "fields": defaultdict(set)}

            type_data[name]["modules"].add(hk_module_name)

            parent = obj.__mro__[1]
            type_data[name]["parents"].add(parent.__name__)

            for dc_field in dataclasses.fields(obj):
                field_name = dc_field.name
                field_type = dc_field.type
                type_data[name]["fields"][field_name].add((str(field_type), hk_module_name))

    # Filter to only include types shared across two or more modules
    return {
        name: data
        for name, data in type_data.items()
        # if len(data["modules"]) > 1
        # if len(data["parents"]) == 1
    }


def generate_pyi(shared_types: dict[str, dict[str, tp.Any]], output_file: Path | str):
    """
    Generate a `.pyi` file from shared types data.

    Args:
        shared_types: Shared types data from `get_shared_types`.
        output_file: Path to the `.pyi` file to write.
    """

    # Remove any types from `shared_types` whose parent is not also in `shared_types`.
    # for type_name, data in tuple(shared_types.items()):
    #     parent = next(iter(data["parents"]))
    #     if parent not in shared_types:
    #         del shared_types[type_name]

    with Path(output_file).open("w") as f:

        # Docstring.
        f.write("\"\"\"\n")
        f.write("This file was generated by `soulstruct_havok.types._create_typing.py`.\n")
        f.write("Do not edit this file directly.\n")
        f.write("\"\"\"\n\n")

        # Main imports.
        f.write("from __future__ import annotations\n\n")
        f.write("import numpy as np\n\n")
        f.write("from soulstruct_havok.types.base import *\n")
        f.write("from soulstruct_havok.types.hk import hk\n")
        f.write("from soulstruct_havok.utilities.maths import *\n\n")

        for type_name, data in shared_types.items():
            # parent = next(iter(data["parents"]))
            # parent = parent.replace("[", "(").replace("]", ")")

            modules = ", ".join(sorted((m.removeprefix("hk") for m in data["modules"]), key=lambda m: int(m[2:])))
            f.write(f"\nclass {type_name}(hk):\n")
            f.write(f"    \"\"\"{modules}\"\"\"\n\n")

            fields = data["fields"]
            for field_name, field_types_modules in sorted(fields.items()):
                field_modules_str = ", ".join(
                    sorted((m.removeprefix("hk") for _, m in field_types_modules), key=lambda m: int(m[2:]))
                )
                field_types_set = {t for t, _ in field_types_modules}
                field_types_set_available = {
                    t for t in field_types_set
                    if not t.startswith("hk") or t in shared_types
                }
                if not field_types_set_available:
                    field_types_str = " | ".join(sorted(field_types_set))
                    f.write(f"    # {field_modules_str}\n")
                    f.write(f"    # {field_name}: {field_types_str}\n\n")
                    continue

                field_types_str = " | ".join(sorted(field_types_set_available))
                f.write(f"    # {field_modules_str}\n")
                f.write(f"    {field_name}: {field_types_str}\n\n")


def main():
    from soulstruct_havok.types import hk550, hk2010, hk2014, hk2015, hk2016, hk2018
    modules = [hk550, hk2010, hk2014, hk2015, hk2016, hk2018]
    shared_types = get_shared_types(modules)
    generate_pyi(shared_types, "typing.pyi")


if __name__ == "__main__":
    main()
